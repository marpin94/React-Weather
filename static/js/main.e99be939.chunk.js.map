{"version":3,"sources":["components/WeatherImg.js","components/WeatherCards.js","components/SearchBar.js","components/Nav.js","App.js","index.js"],"names":["WeatherImg","props","icon","WeatherCards","temp","city","description","state","country","faren","useState","weatherKey","setWeatherKey","temp_f","Math","round","weatherImgObj","clouds","clear","snow","rain","useEffect","keys","Object","values","lower","toLowerCase","i","length","includes","renderWeatherImg","className","SearchBar","setCity","searchResults","setSearchResults","load","setLoad","key","process","e","a","preventDefault","alert","fetch","then","res","json","data","catch","error","console","log","undefined","apiData","city_name","weather","state_code","country_code","type","placeholder","value","onChange","target","onClick","Nav","App","setFaren","require","config","ReactDOM","render","document","getElementById"],"mappings":"qNAGaA,EAAa,SAACC,GAEvB,OACI,6BACI,kBAAC,IAAD,CAAuBC,KAAMD,EAAMC,SCDlCC,EAAe,SAAC,GAAsD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,KAAMC,EAAwC,EAAxCA,YAAaC,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,QAASC,EAAW,EAAXA,MAAW,EAG1CC,mBAAS,IAHiC,mBAGvEC,EAHuE,KAG3DC,EAH2D,KAK1EC,EAASC,KAAKC,MAAc,EAAPX,EAAS,EAAI,IAGlCY,EAAgB,CAChBC,OAAQ,SACRC,MAAO,YACPC,KAAM,OACNC,KAAM,QAyBV,OAPDC,qBAAU,YAfgB,WACrB,GAAGf,EAAa,CACZM,EAAc,IAId,IAHA,IAAMU,EAAOC,OAAOD,KAAKN,GACnBQ,EAASD,OAAOC,OAAOR,GACvBS,EAAQnB,EAAYoB,cACjBC,EAAI,EAAGA,EAAIL,EAAKM,OAAQD,IAC1BF,EAAMI,SAASP,EAAKK,KACpBf,EAAcY,EAAOG,KAQhCG,MAOA,oCACQ,wBAAIC,UAAU,eAAd,qBACR,6BACA,yBAAKA,UAAU,4DAEf,yBAAKA,UAAY,yCAAjB,IAA2DpB,GAAc,kBAAC,EAAD,CAAYT,KAAMS,IAA3F,MAEI,yBAAKoB,UAAU,oBACV1B,GAAQ,4BAAKA,EAAgB,MAAVG,EAAA,WAAoBD,GAAQ,KAIpD,yBAAKwB,UAAU,aACVvB,GAAoB,MAATA,EAAe,GAAG,wBAAIuB,UAAU,eAAevB,GAC1DJ,GAAQ,4CAAkBK,EAAM,GAAD,OAAKI,EAAL,gBAAmBT,EAAnB,OAC/BE,GAAe,+BAAKA,EAAL,SCpDnB0B,EAAY,SAAC,GAAa,IAAZvB,EAAW,EAAXA,MAAW,EAEVC,mBAAS,IAFC,mBAE3BL,EAF2B,KAErB4B,EAFqB,OAGQvB,mBAAS,IAHjB,mBAG3BwB,EAH2B,KAGZC,EAHY,OAIVzB,oBAAS,GAJC,mBAI3B0B,EAJ2B,KAIrBC,EAJqB,OAKN3B,mBAAS,mBALH,mBAU5B4B,GAV4B,UAUtBC,oCAVsB,4CAgBlC,WAA4BC,GAA5B,eAAAC,EAAA,yDACID,EAAEE,iBAEU,KAATrC,EAHP,yCAKYsC,MAAM,wBALlB,uBAQ0BC,MAAM,+CAAD,OAAgDvC,EAAhD,gBAA4DiC,IACtFO,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAI,OAAIA,KAGbC,OAAM,SAAAC,GACLC,QAAQC,IAAIF,MAdlB,eAmBmBG,IAXTC,EARV,gCAoBQrB,EAAQ,IApBhB,kBAsBYU,MAAM,qCAtBlB,QA0BQR,EAAiB,CACba,KAAKM,EAAQN,KAAK,GAClB5C,KAAKkD,EAAQN,KAAK,GAAG5C,KACrBC,KAAKiD,EAAQN,KAAK,GAAGO,UACrBjD,YAAagD,EAAQN,KAAK,GAAGQ,QAAQlD,YACrCC,MAAO+C,EAAQN,KAAK,GAAGS,WACvBjD,QAAS8C,EAAQN,KAAK,GAAGU,eAhCrC,QAqCQrB,GAAQ,GACRJ,EAAQ,IAtChB,6CAhBkC,sBA6DlC,OACA,yBAAKF,UAAU,4DAEX,0BAAMA,UAAU,cACZ,2BAAOA,UAAU,+BAA8B4B,KAAK,OAAOC,YAAY,qBAAqBC,MAAOxD,EAAMyD,SAAU,SAACtB,GAAD,OAAKP,EAAQO,EAAEuB,OAAOF,UACzI,4BAAQ9B,UAAU,4BAA2BiC,QAlEnB,6CAkE1B,WAGJ,yBAAKjC,UAAU,IACVK,GAAQ,kBAAC,EAAD,CACThC,KAAM8B,EAAc9B,KACpBC,KAAM6B,EAAc7B,KACpBC,YAAa4B,EAAc5B,YAC3BC,MAAS2B,EAAc3B,MACvBC,QAAW0B,EAAc1B,QACzBC,MAAOA,IAEP,gCCnFCwD,EAAM,WACf,OACI,yBAAKlC,UAAU,+BACX,wBAAIA,UAAU,cAAd,uBCwBGmC,EArBH,WAAO,IAAD,EAEUxD,oBAAS,GAFnB,mBAETD,EAFS,KAEF0D,EAFE,KAQhB,OACA,6BAEE,kBAAC,EAAD,MACA,4BAAQR,KAAK,SAAS5B,UAAU,0CAA0CiC,QATxD,SAACxB,GACnBA,EAAEE,iBACFyB,GAAU1D,KAOV,gBACA,yBAAKsB,UAAU,aACb,kBAAC,EAAD,CAAWtB,MAAOA,OClBxB2D,EAAQ,IAAUC,SAGlBC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,U","file":"static/js/main.e99be939.chunk.js","sourcesContent":["import React from 'react'\r\nimport ReactAnimatedWeather from 'react-animated-weather'\r\n\r\nexport const WeatherImg = (props) => {\r\n   \r\n    return (\r\n        <div>\r\n            <ReactAnimatedWeather  icon={props.icon}/>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useEffect, useState} from 'react'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport { WeatherImg } from './WeatherImg';\r\n\r\n\r\n\r\nexport const WeatherCards = ({temp, city, description, state, country, faren}) => {\r\n\r\n\r\n    const [weatherKey, setWeatherKey] = useState('')\r\n    \r\n    var temp_f = Math.round((temp * 9/5) +32);\r\n    \r\n\r\n    let weatherImgObj = {\r\n        clouds: 'CLOUDY',\r\n        clear: 'CLEAR_DAY',\r\n        snow: 'SNOW',\r\n        rain: 'RAIN'\r\n    }\r\n\r\n    const renderWeatherImg = () => {\r\n        if(description) {\r\n            setWeatherKey('')\r\n            const keys = Object.keys(weatherImgObj)\r\n            const values = Object.values(weatherImgObj)\r\n            const lower = description.toLowerCase()\r\n            for (let i = 0; i < keys.length; i++){\r\n                if(lower.includes(keys[i])){\r\n                   setWeatherKey(values[i])                  \r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n   useEffect(() => {\r\n        renderWeatherImg();\r\n      \r\n   })\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n                <h2 className='text-center'> Current Weather </h2>\r\n        <br/>\r\n        <div className=' shadow card text-center text-primary border border-info'>\r\n\r\n        <div className = 'card-img d-flex align-self-start mr-3'> {weatherKey && <WeatherImg icon={weatherKey}/>}  </div>\r\n            \r\n            <div className='card-img-overlay'>\r\n                {city && <h2>{city}{country =='US'? `,${state}`:''}</h2>} \r\n                  \r\n            </div>\r\n\r\n            <div className='card-text'>\r\n                {country && country=='US'? '':<h2 className='card-header'>{country}</h2>}\r\n                {temp && <h4>Temperature: {faren? `${temp_f} F`:`${temp} C`}</h4>}\r\n                {description && <p> {description} </p>}\r\n               \r\n            </div>\r\n    \r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","// import { Dropdown } from 'bootstrap'\r\nimport React, { useEffect, useState } from 'react'\r\n\r\n\r\nimport { WeatherCards } from './WeatherCards'\r\n\r\n\r\nexport const SearchBar = ({faren}) => {\r\n\r\n    const [city, setCity] = useState('')\r\n    const [searchResults, setSearchResults] = useState([])\r\n    const [load, setLoad] = useState(false)\r\n    const [option, setOption] = useState('Current Weather')\r\n\r\n\r\n\r\n\r\n    const key = process.env.REACT_APP_API_KEY\r\n\r\n   \r\n\r\n \r\n\r\n    async function handleSubmit(e){\r\n        e.preventDefault()\r\n\r\n        if(city === '') {\r\n            return(\r\n                alert('Please enter a city')\r\n            )\r\n        } else {\r\n        const apiData = await fetch(`https://api.weatherbit.io/v2.0/current?city=${city}&key=${key}`)\r\n        .then(res => res.json())\r\n        .then(data => data)\r\n    \r\n                \r\n        .catch(error => {\r\n          console.log(error)\r\n        })\r\n\r\n\r\n\r\n        if (apiData == undefined) {\r\n            setCity('')\r\n            return(\r\n                alert('City Not Found, Please Try Again')\r\n            )\r\n            \r\n        } else { \r\n            setSearchResults({\r\n                data:apiData.data[0],\r\n                temp:apiData.data[0].temp,\r\n                city:apiData.data[0].city_name,\r\n                description: apiData.data[0].weather.description,\r\n                state: apiData.data[0].state_code,\r\n                country: apiData.data[0].country_code               \r\n            })\r\n\r\n\r\n        }\r\n            setLoad(true)\r\n            setCity('')\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    return (\r\n    <div className='shadow-sm d-flex flex-column justify-content-center  m-5'>\r\n\r\n        <form className='form-group'>\r\n            <input className='form-control form-control-lg'type='text' placeholder='Enter City Name...' value={city} onChange={(e)=>setCity(e.target.value) } />\r\n            <button className='btn btn-primary btn-block'onClick = {handleSubmit}>Search</button> \r\n\r\n        </form>\r\n        <div className=''>\r\n            {load && <WeatherCards \r\n            temp={searchResults.temp} \r\n            city={searchResults.city} \r\n            description={searchResults.description}\r\n            state = {searchResults.state} \r\n            country = {searchResults.country}\r\n            faren={faren} />}\r\n            \r\n            <br/>\r\n\r\n\r\n            \r\n        </div>\r\n    </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport const Nav = () => {\r\n    return (\r\n        <div className='navbar navbar-dark bg-dark '>\r\n            <h2 className='text-white'>React Weather App</h2>\r\n            \r\n        </div>\r\n    )\r\n}\r\n","import React, { useContext, useEffect, useReducer, useState } from 'react'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport { SearchBar } from './components/SearchBar'\r\nimport {Nav} from './components/Nav'\r\n\r\n\r\n\r\n\r\nconst App = () => {\r\n \r\n  const [faren, setFaren] = useState(false)\r\n  const handleClick = (e) => {\r\n    e.preventDefault()\r\n    setFaren(!faren)\r\n}\r\n\r\n  return(\r\n  <div>\r\n    \r\n    <Nav />\r\n    <button type=\"button\" className=\"btn btn-secondary d-flex align-self-end\" onClick={handleClick} > Toggle C/F </button> \r\n    <div className='container'>\r\n      <SearchBar faren={faren}/>\r\n \r\n    </div>\r\n    \r\n  </div>\r\n  )\r\n}\r\nexport default App","import React, {Component} from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App'\nrequire('dotenv').config();\n\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}